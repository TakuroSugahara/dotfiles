# lua util系
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# gitのdiffを表示
[[plugins]]
repo = 'sindrets/diffview.nvim'
depends = ['nvim-lua/plenary.nvim']
hook_add = '''
  lua require('plugins/diffview')
'''

# ファイルツリー
[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
hook_add = '''
  nnoremap <C-n> :NvimTreeFindFile<CR>
  lua require('plugins/nvim-tree')
  autocmd ColorScheme * highlight link NvimTreeNormal Normal
'''

# ファイル検索
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = ['nvim-lua/plenary.nvim']
hook_add = '''
  nnoremap <silent><C-p> <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <silent><S-f> <cmd>lua require('telescope.builtin').live_grep()<cr>
  nnoremap <silent><S-p> <cmd>lua require('telescope.builtin').buffers()<cr>
  lua require('plugins/telescope')

  nmap <silent><leader>ii  :e ~/.ignore<CR>
'''

# github theme
[[plugins]]
repo = 'projekt0n/github-nvim-theme'
hook_add = '''
  autocmd ColorScheme * hi StatusLine   gui=NONE guifg=white guibg=NONE 
  autocmd ColorScheme * hi StatusLineNC gui=NONE guifg=grey  guibg=NONE 

  autocmd ColorScheme * hi SeNVIDIA GeForce RTXNVIDIA GeForce RTXarch ctermfg=0 ctermbg=211 guibg=#6b6b4f
  colorscheme github_dark_colorblind
'''

# tmux←→nvimの移動
[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_add = '''
  source ~/.config/nvim/plugins/vim-tmux-navigator.vim
'''

# nvim上にterminalを表示
[[plugins]]
repo = 'akinsho/toggleterm.nvim'
hook_add = '''
  lua require('plugins/toggleterm')
'''

# 背景透過
[[plugins]]
repo = 'xiyaowong/transparent.nvim'
hook_add = '''
  lua require('plugins/transparent')
'''

# GraphQL client
[[plugins]]
# repo = 'TakuroSugahara/graphql-client-vim'
repo = '~/work/graphql-client-vim'
hook_add = '''
let g:graphql_client_workspaces = get(g:, 'graphql_client_workspaces', {
      \ 'student': {
      \   'endpoint': 'http://localhost:8080/api/student/graphql',
      \   'headers': 
      \     {
      \       'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c.student',
      \     }
      \   ,
      \ },
      \ 'admin': {
      \   'endpoint': 'http://localhost:8080/api/admin/graphql',
      \   'headers': 
      \     {
      \       'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
      \     }
      \   ,
      \ },
      \})
'''

# copilot
[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
let g:copilot_filetypes = #{
  \   gitcommit: v:true,
  \   markdown: v:true,
  \   text: v:true,
  \   ddu-ff-filter: v:false,
  \ }

" コミットメッセージにdiffを追加しcopilotに食べさせる
function! s:append_diff() abort
  " Get the Git repository root directory
  let git_dir = getcwd()

  " Get the diff of the staged changes relative to the Git repository root
  let diff = system('git -C ' . git_dir . ' diff --cached')

  " Add a comment character to each line of the diff
  let comment_diff = join(map(split(diff, '\n'), {idx, line -> '# ' . line}), "\n")

  " Append the diff to the commit message
  call append(line('$'), split(comment_diff, '\n'))
endfunction

augroup EditCommitMessageCmd
  autocmd!
  autocmd BufNewFile,BufReadPost COMMIT_EDITMSG call s:append_diff()
augroup END
'''

# LSP manager
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
hook_add = '''
  source ~/.config/nvim/plugins/coc.vim
'''

# editorのエリアを簡単にリサイズする
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  source ~/.config/nvim/plugins/winresizer.vim
'''

# sql client
[[plugins]]
repo = 'tpope/vim-dadbod'

# sql client ui
[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'
depends = ['tpope/vim-dadbod']
hook_add = '''
  source ~/.config/nvim/plugins/vim-dadbod-ui.vim
'''

# 閉じかっこ
[[plugins]]
repo = 'rbgrouleff/bclose.vim'

# tpope/vim-fugitiveと連携してgithub urlを開けるようにする
[[plugins]]
repo = 'tpope/vim-rhubarb'

# Git ~でgit commandを提供する
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  command! GC :Git commit
  command! GP :Git push
  command! GPF :Git push -f
  command! GF :Git fetch --prune
  command! GitHubURL :.GBrowse!
  command! GBlame :Git blame
'''

